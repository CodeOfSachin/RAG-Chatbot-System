# RAG Chatbot System Using CSV

## Table of Contents
- [Overview](#overview)
- [Features](#features)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Usage](#usage)
- [File Structure](#file-structure)
- [Notes](#notes)
- [Limitations](#limitations)

## Overview
This repository contains a Retrieval-Augmented Generation (RAG) chatbot system designed for an online clothing store. The system processes product data from a CSV file, generates embeddings for product information, stores them in a ChromaDB vector database, and uses a language model to provide natural, context-aware responses to user queries.

## Features
- **Data Processing**: Loads and cleans product data from a CSV file (`tnt.csv`), handling prices, discounts, and other metadata.
- **Embedding Generation**: Uses the [paraphrase-multilingual-mpnet-base-v2](https://huggingface.co/sentence-transformers/paraphrase-multilingual-mpnet-base-v2) model to create embeddings for product titles, descriptions, variants, and sizes.
- **Vector Database**: Stores embeddings and metadata in a persistent ChromaDB collection for efficient retrieval.
- **Query Handling**: Supports product-related queries, greetings, and out-of-scope questions, with responses generated by the [Mistral-7B-Instruct-v0.3](https://huggingface.co/mistralai/Mistral-7B-Instruct-v0.3) model.
- **Email Capture**: Allows users to submit their email for product availability notifications if a query doesn't match any products.
- **Caching**: Saves embeddings to a pickle file to avoid recomputation unless the CSV file changes.
- **Interactive Interface**: Provides a command-line interface where users can input queries and receive formatted responses (type `exit` to quit).

## Prerequisites
- Python 3.8+
- Google Colab environment with T4 GPU support
- Google Drive for persistent storage
- Hugging Face account and API token for model access

## Installation
1. **Download the Repository**:
   - Go to the GitHub repository: [https://github.com/CodeOfSachin/RAG-Chatbot-System](https://github.com/CodeOfSachin/RAG-Chatbot-System).
   - Click the green "Code" button and select "Download ZIP".
   - Save the ZIP file to your local machine.

2. **Extract and Upload to Google Drive**:
   - Extract the downloaded ZIP file. The extracted folder will be named `RAG-Chatbot-System-main`.
   - Rename the folder to `RAG_Chatbot_System`.
   - Upload the renamed folder to your Google Drive under `/MyDrive`.
   - Ensure the `tnt.csv` file is placed in this directory.

3. **Configure Hugging Face Token**:
   - Open `RAG_Chatbot_System_Using_CSV.ipynb` in Google Colab.
   - Locate the cell with the line `login(token = config.huggingFaceToken)`.
   - Replace `config.huggingFaceToken` with your Hugging Face API token directly, e.g.:
     ```python
     login(token = "your-hugging-face-token")
     ```

4. **Connect to T4 GPU in Google Colab**:
   - Open Google Colab (https://colab.research.google.com/).
   - Click "Runtime" in the menu, then select "Change runtime type".
   - In the dialog, choose "T4 GPU" under "Hardware accelerator" and click "Save".

5. **Run All Code**:
   - In the Colab interface, click "Runtime" in the menu and select "Run all" to execute all cells in the notebook. This will:
     - Mount Google Drive.
     - Install required dependencies.
     - Load and process the CSV file.
     - Generate and cache embeddings.
     - Initialize ChromaDB and populate it with data.
     - Start the interactive chatbot loop.

## Usage
1. **Prepare the CSV File**:
   - Ensure `tnt.csv` is in the `/content/drive/MyDrive/RAG_Chatbot_System` directory with columns like `Title`, `Description`, `Price`, `Original Price`, `Discount`, `Sizes`, `Variants`, `Product Link`, and `Image URLs`.
   - The system cleans and processes this data automatically.

2. **Interact with the Chatbot**:
   - After running all cells, an input prompt will appear in the notebook output.
   - Enter queries like "Do you have sweaters?" or "Tell me about T-shirts".
   - The chatbot responds with relevant product details, including prices, sizes, and links.
   - For unavailable products, you can provide an email to be notified later.
   - Type `exit` to stop the chatbot.

## File Structure
- `RAG_Chatbot_System_Using_CSV.ipynb`: Main Jupyter notebook containing the chatbot implementation.
- `tnt.csv`: Input CSV file with product data (not included; user must provide).
- `embeddings.pkl`: Cached embeddings and metadata (generated automatically).
- `data_hash.txt`: Stores the hash of `tnt.csv` to detect changes (generated automatically).
- `interested_customers.csv`: Stores user emails and queries for unavailable products (generated as needed).
- `/chroma_db`: Directory for persistent ChromaDB storage.

## Notes
- **CSV Changes**: The system checks if `tnt.csv` has changed using a hash. If changed or if `embeddings.pkl` is missing, it regenerates embeddings.
- **Model Quantization**: Uses 4-bit quantization (`BitsAndBytesConfig`) for efficient GPU usage.
- **Distance Threshold**: Queries with a top distance > 8.0 are treated as non-product queries (e.g., greetings or out-of-scope).
- **Email Validation**: Extracts and validates emails using regex; optionally, the `email-validator` package can be used (commented out in code).
- **Error Handling**: Includes logging for file loading, embedding generation, and query processing errors.

## Limitations
- Requires a GPU-enabled environment (e.g., Google Colab with T4 GPU) for efficient model inference.
- The `tnt.csv` file must follow the expected schema; missing or malformed data may cause errors.
- Persistent storage relies on Google Drive; ensure sufficient storage space and correct paths.
- Email functionality is basic and stores data in a CSV without encryption or advanced security.